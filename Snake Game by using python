import pygame
import random

class SnakeGame:
    def __init__(self):
        pygame.init()
        # Constants
        self.WIDTH, self.HEIGHT = 600, 600
        self.BLOCK_SIZE = 20
        self.WHITE = (255, 255, 255)
        self.RED = (255, 0, 0) 
        self.FPS = 10  # Decreased frame rate for slower movement
        self.score_font = pygame.font.SysFont("consolas", 20)
        # Variables
        self.score = 0
        self.snake_pos = [[self.WIDTH // 2, self.HEIGHT // 2]]
        self.snake_speed = [0, self.BLOCK_SIZE]
        self.food_pos = self.generate_food()
        self.win = pygame.display.set_mode((self.WIDTH, self.HEIGHT))
        self.clock = pygame.time.Clock()

    def generate_food(self):
        x = random.randint(0, (self.WIDTH - self.BLOCK_SIZE) // self.BLOCK_SIZE) * self.BLOCK_SIZE
        y = random.randint(0, (self.HEIGHT - self.BLOCK_SIZE) // self.BLOCK_SIZE) * self.BLOCK_SIZE
        return [x, y]

    def draw_objects(self):
        self.win.fill((0, 0, 0))
        for pos in self.snake_pos:
            pygame.draw.rect(self.win, self.WHITE, pygame.Rect(pos[0], pos[1], self.BLOCK_SIZE, self.BLOCK_SIZE))
        pygame.draw.rect(self.win, self.RED, pygame.Rect(self.food_pos[0], self.food_pos[1], self.BLOCK_SIZE, self.BLOCK_SIZE))
        score_text = self.score_font.render(f"Score: {self.score}", True, self.WHITE)
        self.win.blit(score_text, (10, 10))

    def update_snake(self):
        new_head = [self.snake_pos[0][0] + self.snake_speed[0], self.snake_pos[0][1] + self.snake_speed[1]]

        if new_head[0] >= self.WIDTH or new_head[0] < 0 or new_head[1] >= self.HEIGHT or new_head[1] < 0:
            return True  # Game over if snake hits the wall

        if new_head == self.food_pos:
            self.food_pos = self.generate_food()
            self.score += 1
        else:
            self.snake_pos.pop()

        self.snake_pos.insert(0, new_head)

    def game_over_screen(self):
        self.win.fill((0, 0, 0))
        game_over_font = pygame.font.SysFont("consolas", 50)
        game_over_text = game_over_font.render(f"Game Over! Score: {self.score}", True, self.WHITE)
        self.win.blit(game_over_text, (self.WIDTH // 2 - game_over_text.get_width() // 2, self.HEIGHT // 2 - game_over_text.get_height() // 2))
        pygame.display.update()
        pygame.time.delay(2000)  # Delay for 2 seconds before closing
        pygame.quit()

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and self.snake_speed[1] != self.BLOCK_SIZE:
                    self.snake_speed = [0, -self.BLOCK_SIZE]
                elif event.key == pygame.K_DOWN and self.snake_speed[1] != -self.BLOCK_SIZE:
                    self.snake_speed = [0, self.BLOCK_SIZE]
                elif event.key == pygame.K_LEFT and self.snake_speed[0] != self.BLOCK_SIZE:
                    self.snake_speed = [-self.BLOCK_SIZE, 0]
                elif event.key == pygame.K_RIGHT and self.snake_speed[0] != -self.BLOCK_SIZE:
                    self.snake_speed = [self.BLOCK_SIZE, 0]

    def run(self):
        running = True
        while running:
            self.handle_events()
            if self.update_snake():
                self.game_over_screen()
                return
            self.draw_objects()
            pygame.display.update()
            self.clock.tick(self.FPS)

if __name__ == '__main__':
    game = SnakeGame()
    game.run()
